"""int 2 float and composite PK for game_rounds

Revision ID: d703abc30de2
Revises: caf500575720
Create Date: 2025-05-23 01:20:35.222752

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'd703abc30de2'
down_revision: Union[str, None] = 'caf500575720'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('game_rounds', schema=None) as batch_op:
        # Step 1: Drop the existing primary key constraint if it has a known name
        # The name might vary, e.g., 'pk_game_rounds', 'game_rounds_pkey'
        # You might need to inspect your DB or previous migrations for the exact name
        # For a generic approach, we might need to look it up or assume a common one.
        # If 'id' was defined as PK, op.drop_column('id') might not be enough if it's part of a named PK constraint.
        # A safer approach is to drop the constraint then the column if it's not part of the new PK.
        
        # First, try to drop a primary key constraint if one is explicitly named
        # This is highly database-dependent and might need inspection.
        # As a common pattern, if 'id' is the PK, dropping it might be enough before creating a new one.
        # However, creating a new PK typically replaces the old one implicitly if column names are PK.
        
        # Drop the old 'id' column which was the primary key
        batch_op.drop_column('id')
        # Create new composite primary key
        batch_op.create_primary_key('pk_game_rounds_composite', ['session_id', 'round_number'])

    with op.batch_alter_table('tool_usages', schema=None) as batch_op:
        batch_op.alter_column('trust_effect', 
                              existing_type=sa.Integer(),
                              type_=sa.Float(),
                              existing_nullable=True)
        batch_op.alter_column('spread_effect', 
                              existing_type=sa.Integer(),
                              type_=sa.Float(),
                              existing_nullable=True)

    with op.batch_alter_table('tools', schema=None) as batch_op:
        batch_op.alter_column('trust_effect', 
                              existing_type=sa.Integer(),
                              type_=sa.Float(),
                              server_default=sa.text('1.0'),
                              existing_nullable=True,
                              existing_server_default=sa.text('0'))
        batch_op.alter_column('spread_effect', 
                              existing_type=sa.Integer(),
                              type_=sa.Float(),
                              server_default=sa.text('1.0'),
                              existing_nullable=True,
                              existing_server_default=sa.text('0'))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('tools', schema=None) as batch_op:
        batch_op.alter_column('spread_effect', 
                              existing_type=sa.Float(),
                              type_=sa.Integer(),
                              server_default=sa.text('0'),
                              existing_nullable=True,
                              existing_server_default=sa.text('1.0'))
        batch_op.alter_column('trust_effect', 
                              existing_type=sa.Float(),
                              type_=sa.Integer(),
                              server_default=sa.text('0'),
                              existing_nullable=True,
                              existing_server_default=sa.text('1.0'))

    with op.batch_alter_table('tool_usages', schema=None) as batch_op:
        batch_op.alter_column('spread_effect', 
                              existing_type=sa.Float(),
                              type_=sa.Integer(),
                              existing_nullable=True)
        batch_op.alter_column('trust_effect', 
                              existing_type=sa.Float(),
                              type_=sa.Integer(),
                              existing_nullable=True)

    with op.batch_alter_table('game_rounds', schema=None) as batch_op:
        # Drop the composite primary key
        batch_op.drop_constraint('pk_game_rounds_composite', type_='primary')
        # Add back the 'id' column as primary key
        batch_op.add_column(sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
        # Recreate primary key on 'id' (name might need to be what it was before)
        batch_op.create_primary_key('pk_game_rounds_id', ['id']) # Assuming a name for the PK
        # Note: autoincrement=True is tricky to restore perfectly for all DBs without specific dialect ops.
        # For PostgreSQL, you might need to recreate a sequence.

    # ### end Alembic commands ###
